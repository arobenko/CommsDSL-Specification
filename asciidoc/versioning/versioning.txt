[[versioning-versioning]]
== Protocol Versioning Summary ==
This chapter summarizes all version related aspects of the protocol definition.

#### Version of the Schema
The protocol definition [&lt;schema&gt;](../schema/schema.md) has the
**version** [property](../intro/properties.md), that specifies numeric version of the 
protocol.
```
<?xml version="1.0" encoding="UTF-8"?>
<schema name="MyProtocol" version="5">
    ...
</schema>
```

#### Version in the Interface
If protocol reports its version via transport [framing](../frames/frames.md) or
via some special "connection" [message](../messages/messages.md), and the
protocol version must influence how some messages are deserialized / handled, then
there is a need for [&lt;interface&gt;](../interfaces/interfaces.md) definition,
which must contain version field, marked as such using **semanticType="version"**
property.
```
<?xml version="1.0" encoding="UTF-8"?>
<schema name="MyProtocol" version="5">
    <interface name="Interface">
        <int field="SomeName" type="uint16" semanticType="version" /> 
    </interface>
    ...
</schema>
```

#### Version in the Frame
In addition to the [&lt;interface&gt;](../interfaces/interfaces.md) containing
version information, the transport [&lt;frame&gt;](../frames/frames.md) is also
expected to contain [&lt;value&gt;](../frames/value.md) layer, which will
reassign the received version information to the message object (via 
[&lt;interface&gt;](../interfaces/interfaces.md)).
```
<?xml version="1.0" encoding="UTF-8"?>
<schema name="MyProtocol" version="5">
    <interface name="Interface">
        <int field="SomeName" type="uint16" semanticType="version" /> 
    </interface>
    
    <frame name="Frame">
        <size name="Size">
            <int name="SizeField" type="uint16" serOffset="2"/>
        </size>
        <id name="Id">
            <int name="IdField" type="uint8" />  
        </id>
        <value name="Version" interfaces="Interface" interfaceFieldName="SomeName">
            <int name="VersionField" type="uint16" /> 
        </value>
        <payload name="Data" />
    </frame>
</schema>
```

#### Version of the Fields and Messages
Every [message](../messages/messages.md) and [field](../fields/fields.md) support
the following properties, wich can be used to supply version related information.
- **sinceVersion** - Version when the message / field has been introduced.
- **deprecated** - Version when the message / field has been deprecated.
- **removed** - Indication that deprecated message / field must be removed from
serialization and code generation.

#### Version Dependency of the Code
The generated code is expected to be version dependent (i.e. presence of some
messages / fields is determined by the reported version value), if **at least** one
of the defined [&lt;interface&gt;](../interfaces/interfaces.md)-es contains
version field (marked by **semanticType="version"**).

If none of the interfaces has such field, then the generated code cannot be
version dependent and all the version related properties become for documentation
purposes only and cannot influence the presence of the messages / fields. In
such cases the code generator is expected to receive required protocol version in 
its command line parameters and generate code for requested protocol version.

#### Compatibility Recommendation
In case **CommsDSL** is used to define new protocol developed from scratch and
backward / forward compatibility of the protocol is a desired feature, then 
there are few simple rules below, following of which can insure such compatibility.
- Use [&lt;size&gt;](../frames/size.md) layer in the transport 
[framing](../frames/frames.md) to report remaining length of the message.
- Use [&lt;value&gt;](../frames/value.md) layer to report protocol version
in the transport [framing](../frames/frames.md) or define special "connect" 
message that is sent to establish connection and report protocol version
(mark the [&lt;value&gt;](../frames/value.md) layer to be **pseudo**).
- Always add new [fields](../fields/fields.md) at the end of the 
[&lt;message&gt;](../messages/messages.md). Don't forget to specify their
version using **sinceVersion** property.
- Don't **remove** deprecated [fields](../fields/fields.md).
- Always add new [fields](../fields/fields.md) at the bottom of the
[&lt;list&gt;](../fields/list.md) element.
- Add element serialization length report before every
element of the [&lt;list&gt;](../fields/list.md) field (done using 
**elemLengthPrefix** property).
- In case **elemFixedLength** [property](../intro/properties.md) is 
assigned for the [&lt;list&gt;](../fields/list.md) (to avoid
redundant report of the same element length before every element), never
add variable length [fields](../fields/fields.md) to the element of the list.

